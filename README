``` {.stdout}
                                          \\\///
                                         / _  _ \
                                       (| (.)(.) |)
                .--------------------.OOOo--()--oOOO.-------------------.
                |                                                       |
                |        ____                          _                |
                |       /  _/____ ___   ____ _ ____ _ (_)____   ___     |
                |       / / / __ `__ \ / __ `// __ `// // __ \ / _ \    |
                |     _/ / / / / / / // /_/ // /_/ // // / / //  __/    |
                |    /___//_/ /_/ /_/ \__,_/ \__, //_//_/ /_/ \___/     |
                |                           /____/                      |
                |                                                       |
                '-------------------.oooO-------------------------------'
                                     (   )   Oooo.
                                      \ (    (   )
                                       \_)    ) /
                                             (_/
```

A pandoc-filter to process codeblocks into images and/or ascii art
------------------------------------------------------------------

Imagine is a pandoc-filter that will turn codeblocks tagged with certain
classes into images or ascii art. The following classes are currently
supported:

    actdiag, asy, asymptote, blockdiag, boxes, circo, ctioga2, ditaa, dot, fdp,
    figlet, flydraw, gle, gnuplot, graph, graphviz, gri, imagine, mermaid, mscgen,
    neato, nwdiag, octave, packetdiag, pic, pic2plot, plantuml, plot, ploticus,
    protocol, pyxplot, rackdiag, seqdiag, sfdp, shebang, twopi

Examples
--------

### *[Mscgen](http://www.mcternan.me.uk/mscgen/)*

    ```{.mscgen imgout="fcb,img"}
    msc {
     hscale="1.3", arcgradient = "8";

     a [label="Client"],b [label="Server"];

     a=>b [label="data1"];
     a-xb [label="data2"];
     a=>b [label="data3"];
     a<=b [label="ack1, nack2"];
     a=>b [label="data2", arcskip="1"];
     |||;
     a<=b [label="ack3"];
     |||;
    }
    ```

![](pd-images/48e1334a80a0ac5f5854e139f328920f9e7d67c4.png)

For more examples see the [sample.pdf](examples/sample.pdf).

### *[Octave](https://www.gnu.org/software/octave)*

    ```{.octave imgout="fcb,img"}
    figure(1, 'visible', 'off');
    surf(peaks);
    title("peaks");
    print(1, argv(){1});
    ```

![](pd-images/97a5ccef8c2f73c2897bc3f07ebe27fb971d957b.png)

### [Shebang](http://www.google.com/search?q=linux+shebang) using Python & Pygal

    ```{.shebang imgout="fcb,img"}
    #!/usr/bin/env python3
    import sys
    import pygal
    from math import cos
    xy_chart = pygal.XY()
    xy_chart.title = 'XY Cosinus'
    xy_chart.add('x = cos(y)', [(cos(x / 10.), x / 10.) for x in range(-50, 50, 5)])
    xy_chart.add('y = cos(x)', [(x / 10., cos(x / 10.)) for x in range(-50, 50, 5)])
    xy_chart.render_to_png(sys.argv[-1])
    ```

![](pd-images/8296b8c4e66da192e78d37c805a731fa3374e1c8.png)

### *[boxes](http://boxes.thomasjensen.com)*

    ```{.shebang imgout="fcb,stdout"}
    #!/bin/bash
    # I seem to have got myself boxed in!
    cat $0 | boxes -d peek -p h4
    ```

``` {.stdout}
/*       _\|/_
         (o o)
 +----oOO-{_}-OOo------------------------------+
 |    #!/bin/bash                              |
 |    # I seem to have got myself boxed in!    |
 |    cat $0 | boxes -d peek -p h4             |
 +--------------------------------------------*/
```

Installation
------------

ToDo: `pip install pandoc-imagine`

Alternatively:

    > mkdir -p ~/installs/pandoc-imagine
    > cd ~/installs/pandoc-imagine
    > git clone https://github.com/hertogp/imagine.git .
    > python setup.py

As a third option, you can also simply save the `imagine.py` file to a
(sub)directory somewhere along your \$PATH, since that's where pandoc
will be looking for its filters when you call
`pandoc --filter imagine.py ...`.

Usage
-----

### Pandoc usage

`pandoc --filter imagine.py source.md -o destination.pdf`

or some other type of destination document.

### Markdown usage

todo

All details
-----------

``` {.stdout}
Asy

    ```asy
    code
    ```
    =>  asy -o <fname>.<fmt> [<options>] <fname>.asy
    <=  Para(Image)
    

BlockDiag

    ```cmd
    text
    ```
    => cmd -T <fmt> <fname>.txt -o <fname>.ext
    <= Para(Image)

    where cmd is one of:
      blockdiag, segdiag, rackdiag, nwdiag, packetdiag or actdiag

    

Boxes

    ```boxes
    text
    ```
    => boxes [options] <fname>.boxed
    <= CodeBlock(stdout)
    

Ctioga2

    ```ctioga2
    code
    ```
    => ctioga2 [options] -f <fname>.ctioga2
    -> <fname>.pdf
    <= Para(Image)
    

Ditaa
None

Figlet
figlet `codetxt` -> CodeBlock(ascii art)

Flydraw

    ```flydraw
    code
    ```
    => flydraw < code > Image
    <= Para(Image)

    - flydraw reads its command from stdin
    - produces output on stdout, which is saved to <fname>.gif
    - insists on producing GIF files, despite claims in the manual
    

Gle
gle -verbosity 0 -output <fname>.<fmt> <fname>.gle

GnuPlot

    ```gnuplot
    code
    ```
    => gnuplot [options] <fname>.gnuplot -> image data on stdout
    -> write(stdout, <fname>.fmt)
    <= Para(Image)
    

Graph

    ```graph
    code
    ```
    => graph -T fmt [options] <fname>.graph
    -> write(stdout, <fname>.<fmt>)
    <= Para(Image(<fname>.<fmt>))
    

Graphviz

    ```graphviz
    code
    ```
    => dot [options] -T<fmt> <fname>.dot <fname>.<fmt>
    

Gri
gri -c 0 -b <x>.gri -> <x>.ps -> <x>.png -> Para(Img(<x>.png))

Imagine
wraps self, yields new codeblock w/ Imagine __doc__ string

Mermaid

    ```mermaid
    code
    ```
    => mermaid -o <basedir> [options] <fname>.mermaid
    -> <fname>.mermaid.fmt -> <fname>.fmt
    <= Para(Image)
    

MscGen
None

Octave
None

Pic2Plot

    ```pic[2plot]
    code
    ```
    => pic2plot -T <fmt> [options] <fname>.pic2plot
    -> write(stdout, <fname>.<fmt>)
    <= Para(Image)
    

PlantUml
None

Plot

    ```plot
    filename
    ```
    -> test filename exists (is relative to source.md)
    => plot -T <fmt> [options] filename
    -> write(stdout, <fname>.<fmt>)
    <= Para(Image)
    

Ploticus
None

Protocol
protocol `codetxt` -> CodeBlock(packet format in ascii)

PyxPlot

    ```pyxplot
    code
    ```
    .. write('set terminal <fmt>
' +
              'set output <fname>.<fmt>
' +
              code,
             <fname>.pyxplot)
    => pyxplot [options] <fname>.pyxplot
    <= Para(Image)
    

SheBang

    ```shebang
    code
    ```
    .. write(code, <fname>.shebang)
    .. chmod u+x <fname>.shebang
    => <fname>.shebang <fname>.<fmt>
    <= Para(Image)
    


    ```asy
    code
    ```
    =>  asy -o <fname>.<fmt> [<options>] <fname>.asy
    <=  Para(Image)
    
```

<!-- vim:set ft=pandoc: -->

